#!/usr/bin/env node

const fs = require('fs');
const path = require('path');
const {exec, spawn} = require('child_process');
const program = require('commander');

const package = require('../package.json');

const libs = require('../libs');

/**
 * 创建模块文件
 * @param name 模块名
 * @param type 模块类型（1 - page, 2 - component）
 */
function createModuleFiles(name, type) {
    var content = '';
    var moduleTypeMap = [null, 'page', 'component'];
    var moduleType = moduleTypeMap[type];

    fs.mkdirSync(name);
    process.chdir(name);
    ['js', 'json', 'wxml', 'wxss'].forEach(function(fileType) {
        content = fs.readFileSync(
            path.resolve(__dirname, '../boilerplate/' + moduleType + '/' + moduleType + '.' + fileType));
        fs.writeFileSync(name+'.'+fileType, content.toString().replace(/{{\s*.+?\s*}}/ig, name));
    });
    if(type === 1) {
        registerPage(process.cwd() + '/' + name);
    }
    process.chdir('../');
}

function registerPage(pagePath) {
    var depth = 0;
    var appConfigContent, appConfig, appRoot, pageRelPath;
    while(!fs.existsSync('app.json')) {
        if(depth === 10) {
            throw new Error('目录层级太深，未找到app.json文件');
            break;
        } else {
            process.chdir('../');
        }
    }
    appRoot = process.cwd();
    appConfigContent = fs.readFileSync('app.json');
    appConfig = JSON.parse(appConfigContent.toString());
    pageRelPath = path.relative(appRoot, pagePath);
    appConfig.pages.includes(pageRelPath) || appConfig.pages.push(pageRelPath);
    fs.writeFileSync('app.json', JSON.stringify(appConfig, null, 4));
}




program.version(package.version);

program.command('init');

program.command('page <name>')
    .description('创建页面模块')
    .action(function(name) {
        createModuleFiles(name, 1);
    });

program.command('component <name>')
    .description('创建组件模块')
    .action(function(name) {
        createModuleFiles(name, 2);
    });

program.command('dev');

program.command('release');



program.parse(process.argv);